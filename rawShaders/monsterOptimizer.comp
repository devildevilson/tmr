#version 450

layout(set = 0, binding = 0) uniform Camera {
  mat4 viewproj;
  mat4 view;
  vec4 pos;
  vec4 dir;
  uvec2 dim;
} camera;

layout(set = 1, binding = 0) uniform OptimizerData {
  uvec4 data;
  vec4 playerRotation;
} count;

struct Transform {
  vec4 pos;
  vec4 dir;
  vec4 scale;
};

layout(std140, set = 2, binding = 0) readonly buffer Transforms {
  Transform transforms[];
};

layout(std140, set = 3, binding = 0) readonly buffer Matrices {
  mat4 matrices[];
};

struct Texture {
  uint imageArrayIndex;
  uint imageArrayLayer;
  uint samplerIndex;
};

struct TextureData {
  Texture t;
  float movementU;
  float movementV;
};

layout(std430, set = 4, binding = 0) readonly buffer Textures {
  TextureData textures[];
};

struct InstanceData {
  mat4 matrix;
  TextureData texture;
  uint dummy[3];
};

layout(std430, set = 5, binding = 0) buffer InstanceDatas {
  InstanceData instanceDatas[];
};

layout(std140, set = 6, binding = 0) readonly buffer GraphicsIndices {
  uvec4 graphicsIndices[];
};

#define PI 3.1415926535897932384626433
#define HALF_PI (PI/2.0f)

mat4 translate(const mat4 mat, const vec4 vec);
mat4 rotate(const mat4 mat, const float angle, const vec4 normal);
mat4 scale(const mat4 mat, const vec4 vec);

#define WORKGROUP_SIZE 256
layout (local_size_x = WORKGROUP_SIZE, local_size_y = 1, local_size_z = 1) in;

void main() {
  const uint index = gl_GlobalInvocationID.x;
  if (index >= count.data.x) return;

  const uint transformIndex = graphicsIndices[index].x;
  const uint matrixIndex = graphicsIndices[index].y;
  const uint textureIndex = graphicsIndices[index].w;

  const vec4 pos = transforms[transformIndex].pos;
  const vec4 vulkanScale = transforms[transformIndex].scale * vec4(1.0f, -1.0f, 1.0f, 0.0f);

  const mat4 matOne = mat4(
    1.0f, 0.0f, 0.0f, 0.0f,
    0.0f, 1.0f, 0.0f, 0.0f,
    0.0f, 0.0f, 1.0f, 0.0f,
    0.0f, 0.0f, 0.0f, 1.0f
  );
  instanceDatas[index].matrix = translate(matOne, pos);
  instanceDatas[index].matrix = rotate(instanceDatas[index].matrix, HALF_PI - count.playerRotation.y, vec4(0.0f, 1.0f, 0.0f, 0.0f));
  instanceDatas[index].matrix = scale(instanceDatas[index].matrix, vulkanScale);

  // тут же можно умножить эту матрицу на вид, чтобы не делать это в вершинном шейдере

  instanceDatas[index].texture = textures[textureIndex];
}

mat4 translate(const mat4 mat, const vec4 vec) {
  mat4 ret = mat;
  ret[3] = mat[0] * vec[0] + mat[1] * vec[1] + mat[2] * vec[2] + mat[3];
  return ret;
}

mat4 rotate(const mat4 mat, const float angle, const vec4 normal) {
  const float c = cos(angle);
  const float s = sin(angle);

  const vec4 temp = normalize(normal) * (1.0f - c);

  mat3 rot;

  rot[0][0] = c + temp[0] * normal[0];
  rot[0][1] = temp[0] * normal[1] + s * normal[2];
  rot[0][2] = temp[0] * normal[2] - s * normal[1];

  rot[1][0] = temp[1] * normal[0] - s * normal[2];
  rot[1][1] = c + temp[1] * normal[1];
  rot[1][2] = temp[1] * normal[2] + s * normal[0];

  rot[2][0] = temp[2] * normal[0] + s * normal[1];
  rot[2][1] = temp[2] * normal[1] - s * normal[0];
  rot[2][2] = c + temp[2] * normal[2];

  mat4 result;
  result[0] = mat[0] * rot[0][0] + mat[1] * rot[0][1] + mat[2] * rot[0][2];
  result[1] = mat[0] * rot[1][0] + mat[1] * rot[1][1] + mat[2] * rot[1][2];
  result[2] = mat[0] * rot[2][0] + mat[1] * rot[2][1] + mat[2] * rot[2][2];
  result[3] = mat[3];
  return result;
}

mat4 scale(const mat4 mat, const vec4 vec) {
  mat4 ret = mat;
  ret[0] *= vec[0];
  ret[1] *= vec[1];
  ret[2] *= vec[2];

  return ret;
}
