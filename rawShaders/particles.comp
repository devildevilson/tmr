#version 450

struct Particle {
  vec4 cur;
  //vec4 pos;
  vec4 vel;
  vec4 col;
  uvec4 uData;
  vec4 fData;
  uvec4 texture;
};

struct ParticlesCount {
  uint count;
  uint dummy1;
  uint dummy2;
  uint dummy3;
  uint powerOfTwo;
};

layout(set = 0, binding = 0) uniform Camera {
  mat4 viewproj;
  mat4 view;
  vec4 pos; // возможно причина кроется в vec3
  vec4 dir;
  uvec2 dim;
} camera;

layout(set = 1, binding = 0) uniform Uniform {
  vec4 gravity;
  vec4 planes[6];
  uvec4 data;
} u;

layout(std140, set = 2, binding = 0) buffer Particles {
  Particle particles[];
};

layout(std430, set = 3, binding = 0) buffer BufferCount {
  ParticlesCount particlesCount;
};

layout(set = 4, binding = 0) uniform AdditionalData {
  mat4 projection;
  mat4 view;
  mat4 invProjection;
  mat4 invView;
  mat4 invViewProj;
} matrixes;

layout(set = 5, binding = 0) uniform sampler2D colors;
layout(set = 5, binding = 1) uniform sampler2D normals;
layout(set = 5, binding = 2) uniform sampler2D depths;

#define MCS_TO_SEC(dt) (float(dt) / 1000000.0f)

vec4 clip(const vec4 clipNormal, const float bounce, const vec4 vel);

bool isGravityAffect(const uint type);
bool changingSizeFromTime(const uint type);
bool deleteParticleWithMinVelocity(const uint type);
bool stopParticleWithMinVelocity(const uint type);

vec3 unpackNormal(const vec2 enc);
vec4 getPositionFromView(vec4 viewSpacePosition);
vec4 getPosition(const vec2 coord, const float depth);

bool SATOneAxis(const vec4 point, const float radius, const vec4 normalPoint, const vec4 normal, inout vec4 mtv, inout float dist);

#define WORKGROUP_SIZE 256
layout (local_size_x = WORKGROUP_SIZE, local_size_y = 1, local_size_z = 1) in;

void main() {
  const uint index = gl_GlobalInvocationID.x;
  if (index >= particlesCount.count) return;

  particles[index].uData.x += u.data.x;

  const Particle current = particles[index];

  // мы можем использовать партикл буфер как вершинный
  // + нам нужно и здесь и в вершинном шейдере вычислить умножение на матрицу
  // как поступить? удобнее работать конечно с ворлд поз
  // буду работать с ворлд поз, в этом случае нужно сократить количество переменных в Particle

  const uint particleType = current.uData.z;
  const bool gravityAffect = isGravityAffect(particleType);
  const bool sizeChangingTime = changingSizeFromTime(particleType);
  const bool minVelDeleting = deleteParticleWithMinVelocity(particleType);
  const bool minVelStopping = stopParticleWithMinVelocity(particleType);

  // тут нужен еще ветер
  const vec4 lastPos = current.cur;
  //const vec4 newPos = pos + vel * MCS_TO_SEC(current.uData.y) - gravity * MCS_TO_SEC(current.uData.y);
  const vec4 newPos = lastPos + current.vel * MCS_TO_SEC(u.data.x);
  const vec4 newVel = current.vel + u.gravity * MCS_TO_SEC(u.data.x) * float(gravityAffect);

  const float timeDiv = float(particles[index].uData.x) / float(particles[index].uData.y);
  const float finalCoef = 1.0f - timeDiv;
  const float radius = sizeChangingTime ? abs(mix(current.fData.x, current.fData.y, finalCoef)) : current.fData.x;

  const vec4 screenPos = camera.viewproj * newPos;
  const vec2 screenUV = screenPos.xy;
  const ivec2 pixel = ivec2(screenUV * camera.dim);

  const float finalRadius = radius / screenPos.w;

  // мы должны решить как выталкивать частицы, по идее ничего особ сложного
  const vec2 encNorm = texelFetch(normals, pixel, 0).xy;
  const vec4 normal = getPositionFromView(vec4(unpackNormal(encNorm), 0.0f));
  const float depth = texelFetch(depths, pixel, 0).x;

  // у меня есть точка и нормаль к точке
  // облегченная версия САТ выталкивает в ту или иную сторону
  // клипаю по мтв скорость
  // в общем то ничего сложного

  // нужно найти normalPoint, то есть вывести из depth точку // *2.0f-vec2(1.0f)
  const vec4 normalPoint = getPosition(screenUV, depth);

  vec4 mtv;
  float dist;
  const bool res = SATOneAxis(newPos, radius, normalPoint, normal, mtv, dist);

  vec4 finalPos = newPos;
  vec4 finalVel = newVel;
  if (dist > radius*2.0f) {
    // ситуация частица сильно ЗА каким то объектом
    // что делать? удалять? когда это может произойти?
    // это скорее всего будет редко происходить, не особ понимаю даже когда именно
    // поэтому наверное лучше всего удалять
    particles[index].uData.x = 0xffffffff;
  } else {
    finalPos = res ? finalPos + mtv * dist : finalPos;
    finalVel = clip(normal, current.fData.w, newVel);
  }

  if (current.uData.x > current.uData.y) {
    particles[index].uData.x = 0xffffffff;
  }

  const float scalar = length(newVel);
  if (minVelDeleting && scalar < current.fData.z) {
    particles[index].uData.x = 0xffffffff;
  }

  if (minVelStopping && scalar < current.fData.z) {
    particles[index].vel = vec4(0.0f, 0.0f, 0.0f, 0.0f);
  } else {
    particles[index].vel = finalVel;
  }

  particles[index].cur = finalPos;

  if (particles[index].uData.x == 0xffffffff) {
    atomicAdd(particlesCount.count, -1);
  }

  // могу ли я использовать позиции приведенные в спейс экрана? нет, вряд ли
  // нужно ли мне считать по нескольку раз умножение матриц, это можно избежать
  // снова сохраняя позицию в дополнительном месте
  // как использовать эту позицию в геометрическом буфере?
  // у меня есть радиус, который я видимо тоже должен перевести в спейс экрана
  //
}

vec4 clip(const vec4 clipNormal, const float bounce, const vec4 vel) {
  const float backoff = dot(vel, clipNormal) * bounce;
  return vel - clipNormal * backoff;
}

#define GRAVITY_AFFECT (1<<0)
#define CHANGING_SIZE_FROM_TIME (1<<1)
#define DELETE_PARTICLE_MIN_VEL (1<<2)
#define STOP_PARTICLE_MIN_VEL (1<<3)

bool isGravityAffect(const uint type) {
  return (type & GRAVITY_AFFECT) == GRAVITY_AFFECT;
}

bool changingSizeFromTime(const uint type) {
  return (type & CHANGING_SIZE_FROM_TIME) == CHANGING_SIZE_FROM_TIME;
}

bool deleteParticleWithMinVelocity(const uint type) {
  return (type & DELETE_PARTICLE_MIN_VEL) == DELETE_PARTICLE_MIN_VEL;
}

bool stopParticleWithMinVelocity(const uint type) {
  return (type & STOP_PARTICLE_MIN_VEL) == STOP_PARTICLE_MIN_VEL;
}

vec3 unpackNormal(const vec2 enc) {
  vec2 fenc = enc * 4.0 - vec2(2.0);
  float f = dot(fenc, fenc);
  float g = sqrt(1-f/4);

  vec3 n;
  n.xy = fenc*g;
  n.z = 1-f/2;
  return n;
}

vec4 getPositionFromView(vec4 viewSpacePosition) {
  const vec4 worldSpacePosition = matrixes.invView * viewSpacePosition;
  return worldSpacePosition;
}

vec4 getPosition(const vec2 coord, const float depth) {
  //*2.0f-vec2(1.0f)
  const vec4 clipSpacePosition = vec4(coord, depth, 1.0f);
  vec4 viewSpacePosition = matrixes.invViewProj * clipSpacePosition;

  viewSpacePosition /= viewSpacePosition.w;

  return viewSpacePosition;
}

bool overlap(const float min1, const float max1, const float min2, const float max2, const vec4 axis, inout vec4 mtv, inout float dist) {
  const float test1 = min1 - max2;
  const float test2 = min2 - max1;

  if (test1 > 0.0f || test2 > 0.0f) return false;

  const float d = max(min(abs(test1), abs(test2)), 0.0f);

  mtv = axis;
  dist = d;

  return true;
}

bool SATOneAxis(const vec4 point, const float radius, const vec4 normalPoint, const vec4 normal, inout vec4 mtv, inout float dist) {
  const float normalCoef = dot(normalPoint, normal);
  const float pointCoef = dot(point, normal);

  const float minPoint = pointCoef - radius;
  const float maxPoint = pointCoef + radius;

  return overlap(normalCoef, normalCoef, minPoint, maxPoint, normal, mtv, dist);
}
